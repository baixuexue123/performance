#
# Autogenerated by Thrift Compiler (0.17.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys

from thrift.transport import TTransport
all_structs = []


class TxType(object):
    Legacy = 0
    AccessList = 1
    DynamicFee = 2

    _VALUES_TO_NAMES = {
        0: "Legacy",
        1: "AccessList",
        2: "DynamicFee",
    }

    _NAMES_TO_VALUES = {
        "Legacy": 0,
        "AccessList": 1,
        "DynamicFee": 2,
    }


class AccessTuple(object):
    """
    Attributes:
     - address
     - storageKeys

    """


    def __init__(self, address=None, storageKeys=None,):
        self.address = address
        self.storageKeys = storageKeys

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.address = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.storageKeys = []
                    (_etype3, _size0) = iprot.readListBegin()
                    for _i4 in range(_size0):
                        _elem5 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        self.storageKeys.append(_elem5)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('AccessTuple')
        if self.address is not None:
            oprot.writeFieldBegin('address', TType.STRING, 1)
            oprot.writeString(self.address.encode('utf-8') if sys.version_info[0] == 2 else self.address)
            oprot.writeFieldEnd()
        if self.storageKeys is not None:
            oprot.writeFieldBegin('storageKeys', TType.LIST, 2)
            oprot.writeListBegin(TType.STRING, len(self.storageKeys))
            for iter6 in self.storageKeys:
                oprot.writeString(iter6.encode('utf-8') if sys.version_info[0] == 2 else iter6)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Transaction(object):
    """
    Attributes:
     - sender
     - to
     - value
     - gas
     - gasPrice
     - maxFeePerGas
     - maxPriorityFeePerGas
     - nonce
     - data
     - accessList
     - type

    """


    def __init__(self, sender=None, to=None, value=None, gas=None, gasPrice=None, maxFeePerGas=None, maxPriorityFeePerGas=None, nonce=None, data=None, accessList=None, type=None,):
        self.sender = sender
        self.to = to
        self.value = value
        self.gas = gas
        self.gasPrice = gasPrice
        self.maxFeePerGas = maxFeePerGas
        self.maxPriorityFeePerGas = maxPriorityFeePerGas
        self.nonce = nonce
        self.data = data
        self.accessList = accessList
        self.type = type

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.sender = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.to = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.value = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I64:
                    self.gas = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.gasPrice = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.maxFeePerGas = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.maxPriorityFeePerGas = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.I64:
                    self.nonce = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.STRING:
                    self.data = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.LIST:
                    self.accessList = []
                    (_etype10, _size7) = iprot.readListBegin()
                    for _i11 in range(_size7):
                        _elem12 = AccessTuple()
                        _elem12.read(iprot)
                        self.accessList.append(_elem12)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.I32:
                    self.type = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Transaction')
        if self.sender is not None:
            oprot.writeFieldBegin('sender', TType.STRING, 1)
            oprot.writeString(self.sender.encode('utf-8') if sys.version_info[0] == 2 else self.sender)
            oprot.writeFieldEnd()
        if self.to is not None:
            oprot.writeFieldBegin('to', TType.STRING, 2)
            oprot.writeString(self.to.encode('utf-8') if sys.version_info[0] == 2 else self.to)
            oprot.writeFieldEnd()
        if self.value is not None:
            oprot.writeFieldBegin('value', TType.STRING, 3)
            oprot.writeString(self.value.encode('utf-8') if sys.version_info[0] == 2 else self.value)
            oprot.writeFieldEnd()
        if self.gas is not None:
            oprot.writeFieldBegin('gas', TType.I64, 4)
            oprot.writeI64(self.gas)
            oprot.writeFieldEnd()
        if self.gasPrice is not None:
            oprot.writeFieldBegin('gasPrice', TType.STRING, 5)
            oprot.writeString(self.gasPrice.encode('utf-8') if sys.version_info[0] == 2 else self.gasPrice)
            oprot.writeFieldEnd()
        if self.maxFeePerGas is not None:
            oprot.writeFieldBegin('maxFeePerGas', TType.STRING, 6)
            oprot.writeString(self.maxFeePerGas.encode('utf-8') if sys.version_info[0] == 2 else self.maxFeePerGas)
            oprot.writeFieldEnd()
        if self.maxPriorityFeePerGas is not None:
            oprot.writeFieldBegin('maxPriorityFeePerGas', TType.STRING, 7)
            oprot.writeString(self.maxPriorityFeePerGas.encode('utf-8') if sys.version_info[0] == 2 else self.maxPriorityFeePerGas)
            oprot.writeFieldEnd()
        if self.nonce is not None:
            oprot.writeFieldBegin('nonce', TType.I64, 8)
            oprot.writeI64(self.nonce)
            oprot.writeFieldEnd()
        if self.data is not None:
            oprot.writeFieldBegin('data', TType.STRING, 9)
            oprot.writeString(self.data.encode('utf-8') if sys.version_info[0] == 2 else self.data)
            oprot.writeFieldEnd()
        if self.accessList is not None:
            oprot.writeFieldBegin('accessList', TType.LIST, 10)
            oprot.writeListBegin(TType.STRUCT, len(self.accessList))
            for iter13 in self.accessList:
                iter13.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.type is not None:
            oprot.writeFieldBegin('type', TType.I32, 11)
            oprot.writeI32(self.type)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(AccessTuple)
AccessTuple.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'address', 'UTF8', None, ),  # 1
    (2, TType.LIST, 'storageKeys', (TType.STRING, 'UTF8', False), None, ),  # 2
)
all_structs.append(Transaction)
Transaction.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'sender', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'to', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'value', 'UTF8', None, ),  # 3
    (4, TType.I64, 'gas', None, None, ),  # 4
    (5, TType.STRING, 'gasPrice', 'UTF8', None, ),  # 5
    (6, TType.STRING, 'maxFeePerGas', 'UTF8', None, ),  # 6
    (7, TType.STRING, 'maxPriorityFeePerGas', 'UTF8', None, ),  # 7
    (8, TType.I64, 'nonce', None, None, ),  # 8
    (9, TType.STRING, 'data', 'UTF8', None, ),  # 9
    (10, TType.LIST, 'accessList', (TType.STRUCT, [AccessTuple, None], False), None, ),  # 10
    (11, TType.I32, 'type', None, None, ),  # 11
)
fix_spec(all_structs)
del all_structs
